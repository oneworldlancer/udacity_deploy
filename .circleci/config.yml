--- 
jobs: 
  build: 
    docker: 
      - 
        image: "cimg/node:14.15"
    steps: 
      - 
        node/install: 
          node-version: "14.15"
      - checkout
      - 
        run: 
          command: |
              echo "NODE --version" 
              echo $(node --version)
              echo "NPM --version" 
              echo $(npm --version)
              npm run frontend:install
          name: "Install Front-End Dependencies"
      - 
        run: 
          command: |
              echo "TODO: Install dependencies in the the backend API "
              npm run api:install
          name: "Install API Dependencies"
      - 
        run: 
          command: |
              echo "TODO: Build the frontend app"
              npm run frontend:build
          name: "Front-End Build"
      - 
        run: 
          command: |
              echo "TODO: Build the backend API"
              npm run api:build
          name: "API Build"
  deploy: 
    ? "-run"
    : 
      command: |
          echo "# TODO: Install, build, deploy in both apps"
          eb init udagram-api-dev --platform node.js --region us-east-1
          echo "# Deploy"
          npm run deploy
          echo "# use EB"
          eb use udagram-api-dev
          echo "# EB setenvs"
          eb setenv POSTGRES_HOST=$POSTGRES_HOST DB_PORT=$DB_PORT POSTGRES_PASSWORD=$POSTGRES_PASSWORD POSTGRES_USERNAME=$POSTGRES_USERNAME POSTGRES_DB=$POSTGRES_DB JWT_SECRET=$JWT_SECRET PORT=$PORT
      name: Envs
    docker: 
      - 
        image: "cimg/base:stable"
    steps: 
      - 
        node-version: "14.15"
        node/install: ~
      - eb/setup
      - aws-cli/setup
      - checkout
  test: 
    docker: 
      - 
        image: "cimg/base:stable"
    steps: 
      - 
        run: 
          command: "echo \"# TODO: Testing FrontEnd\"\n"
          name: "Test FrontEnd"
orbs: 
  aws-cli: circleci/aws-cli@3.1.1
  eb: circleci/aws-elastic-beanstalk@2.0.1
  node: circleci/node@5.0.2
version: 2.1
workflows: 
  udagram: 
    jobs: 
      - test
      - build
      - 
        hold: 
          filters: 
            branches: 
              only: 
                - main
          type: approval
      - 
        deploy: 
          requires: 
            - hold
